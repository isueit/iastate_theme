<?php

/*
 * Implements template_preprocess_menu_local_task().
 *
 * Add Bootstrap 4 classes to links in tabs
 */

function iastate_theme_preprocess_menu_local_task(&$variables)
{
  $variables['link']['#attributes']['class'][] = 'nav-link';
  if (!empty($variables['element']['#active'])) {
    $variables['link']['#attributes']['class'][] = 'active';
  }
}

/*
 * Implements template_preprocess_views_view().
 *
 * Add Bootstrap 4 classes to views buttons
 */

function iastate_theme_preprocess_views_view(&$variables)
{
  $variables['more']['#options']['attributes']['class'] = array('btn', 'btn-sm', 'btn-outline-danger');
}

/*
 * Implements template_preprocess_menu_local_action().
 *
 * Add Bootstrap 4 classes to local actions
 */

function iastate_theme_preprocess_menu_local_action(&$variables)
{
  $variables['link']['#options']['attributes']['class'][] = 'btn';
  $variables['link']['#options']['attributes']['class'][] = 'btn-sm';
  $variables['link']['#options']['attributes']['class'][] = 'btn-outline-info';
}

/*
 * Implements template_preprocess_links().
 *
 * Add Bootstrap 4 classes to Read More and Comments links
 */

function iastate_theme_preprocess_links(&$variables)
{
  if (!empty($variables['links']['node-readmore']['link'])) {
    $variables['links']['node-readmore']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-danger';
  }
  if (!empty($variables['links']['comment-comments']['link'])) {
    $variables['links']['comment-comments']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-danger';
  }
  if (!empty($variables['links']['comment-add']['link'])) {
    $variables['links']['comment-add']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-success';
  }
  if (!empty($variables['links']['comment-delete']['link'])) {
    $variables['links']['comment-delete']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-danger';
  }
  if (!empty($variables['links']['comment-edit']['link'])) {
    $variables['links']['comment-edit']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-info';
  }
  if (!empty($variables['links']['comment-reply']['link'])) {
    $variables['links']['comment-reply']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-success';
  }
  /* Book */
  if (!empty($variables['links']['book_printer']['link'])) {
    $variables['links']['book_printer']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-info';
  }
  if (!empty($variables['links']['book_add_child']['link'])) {
    $variables['links']['book_add_child']['link']['#options']['attributes']['class'][] = 'btn btn-sm btn-outline-success';
  }
}

/*
 * Implements theme_form_alter().
 *
 * Add ISU Theme class to Site Navbar search form
 */

use Drupal\Core\Form\FormStateInterface;

function iastate_theme_form_alter(array &$form, FormStateInterface $form_state, $form_id)
{
  if ($form_id == 'search_block_form') {
    $form['actions']['submit']['#attributes']['class'][] = 'isu-search__search-btn';
  }
}

/*
 * Implements template_preprocess_field_multiple_value_form().
 *
 * Add Bootstrap 4 table classes to the multipe value field tables.
 */

function iastate_theme_preprocess_field_multiple_value_form(&$variables)
{
  $variables['table']['#attributes']['class'][] = 'table table-bordered isu-multiple-value-form-table';

  if (!empty($variables['table']['#header'][0]['data']['#prefix']) && $variables['table']['#header'][0]['data']['#prefix'] == "<h4 class=\"label\">") {
    unset($variables['table']['#header'][0]['data']['#prefix'], $variables['table']['#header'][0]['data']['#suffix']);
  }
}

/*
 * Implements template_preprocess_file_widget_multiple().
 *
 * Add Bootstrap 4 table classes to multiple file/image field tables.
 */

function iastate_theme_preprocess_file_widget_multiple(&$variables)
{
  $variables['table']['#attributes']['class'][] = 'table table-bordered isu-file-widget-multiple-table';
}

/*
 * Implements theme_preprocess()
 *
 * Allow is_front to be used on other templates
 */

function iastate_theme_preprocess(&$variables, $hook)
{
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  } catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }
  // Ensure the cache varies correctly (new in Drupal 8.3).
  $variables['#cache']['contexts'][] = 'url.path.is_front';

  /*$variables['iastate_unit_name'] = theme_get_setting('iastate_unit_name');
  $variables['iastate_unit_url'] = theme_get_setting('iastate_unit_url');*/

  // Added variables as a workaround for twig not having file exists
  // Theses variables help with our "local" javascript and css
  global $base_url;
  $variables['js_file_exists'] = file_exists(DRUPAL_ROOT . '/local/javascript.js');
  $variables['js_file_url'] = $base_url . '/local/javascript.js';
  $variables['css_file_exists'] = file_exists(DRUPAL_ROOT . '/local/styles.css');
  $variables['css_file_url'] = $base_url . '/local/styles.css';
  $variables['printcss_file_exists'] = file_exists(DRUPAL_ROOT . '/local/print.css');
  $variables['printcss_file_url'] = $base_url . '/local/print.css';
  $variables['footer2_file_exists'] = file_exists(DRUPAL_ROOT . '/local/footer2.htm');
  $variables['footer2_file_path'] = DRUPAL_ROOT . '/local/footer2.htm';
  $variables['footer2_file_contents'] = '';
  if ($variables['footer2_file_exists']) {
    $variables['footer2_file_contents'] = file_get_contents(DRUPAL_ROOT . '/local/footer2.htm');
  }

  // Check if we should include county_iastate.css
  $counties = ['adair', 'adams', 'allamakee', 'appanoose', 'audubon', 'benton', 'blackhawk', 'boone', 'bremer', 'buchanan', 'buenavista', 'butler', 'calhoun', 'carroll', 'cass', 'cedar', 'cerrogordo', 'cherokee', 'chickasaw', 'clarke', 'clay', 'clayton', 'clinton', 'crawford', 'dallas', 'davis', 'decatur', 'delaware', 'desmoines', 'dickinson', 'dubuque', 'emmet', 'fayette', 'floyd', 'franklin', 'fremont', 'greene', 'grundy', 'guthrie', 'hamilton', 'hancock', 'hardin', 'harrison', 'henry', 'howard', 'humboldt', 'ida', 'iowa', 'jackson', 'jasper', 'jefferson', 'johnson', 'jones', 'keokuk', 'kossuth', 'lee', 'linn', 'louisa', 'lucas', 'lyon', 'madison', 'mahaska', 'marion', 'marshall', 'mills', 'mitchell', 'monona', 'monroe', 'montgomery', 'muscatine', 'obrien', 'osceola', 'page', 'paloalto', 'plymouth', 'pocahontas', 'polk', 'eastpottawattamie', 'westpottawattamie', 'poweshiek', 'ringgold', 'sac', 'scott', 'shelby', 'sioux', 'story', 'tama', 'taylor', 'theme', 'union', 'vanburen', 'wapello', 'warren', 'washington', 'wayne', 'webster', 'winnebago', 'winneshiek', 'woodbury', 'worth', 'wright'];
  $site = 'unknown';
  $folders = explode('/', \Drupal::root());
  if (count($folders) >= 2) {
    $site = strtolower($folders[count($folders) - 2]);
  }
  $variables['is_county'] = in_array($site, $counties);
  $variables['county_css'] = $base_url . '/themes/custom/iastate_theme/css/county_iastate.css';

  // Check to see if it's an edit/add/ or delete node page
  $route_name = \Drupal::routeMatch()->getRouteName();

  if ($route_name == 'entity.node.edit_form') {
    $variables['is_node_edit'] = 'edit';
  } elseif ($route_name == 'node.add') {
    $variables['is_node_add'] = 'add';
  } elseif ($route_name == 'entity.node.delete_form') {
    $variables['is_node_delete'] = 'delete';
  }
}

/*
 * Implements theme_preprocess_page().
 *
 * Make theme settings available in templates
 */
function iastate_theme_preprocess_page(&$variables)
{
  $config = \Drupal::config('system.site');
  $variables['site_name'] = $config->get('name');
  $variables['isu_navbar'] = theme_get_setting('isu_navbar');
  $variables['gold_border_hidden'] = theme_get_setting('gold_border_hidden');

  $variables['theme_path'] = base_path() . $variables['directory'];

  $variables['default_footer_logo'] = theme_get_setting('default_footer_logo');
  $variables['iastate_footer_logo_path'] = theme_get_setting('iastate_footer_logo_path');
  $variables['iastate_footer_logo_alttext'] = theme_get_setting('iastate_footer_logo_alttext');
  $variables['iastate_footer_logo_url'] = theme_get_setting('iastate_footer_logo_url');

  $variables['default_social_footer'] = theme_get_setting('default_social_footer');

  $variables['default_copyright'] = theme_get_setting('default_copyright');
  // Create copyright render array
  $variables['copyright_subject'] = array(
    '#type' => 'processed_text',
    '#text' => isset(theme_get_setting('copyright_subject')['value']) ? theme_get_setting('copyright_subject')['value'] : '',
    '#format' => theme_get_setting('copyright_subject')['format'],
  );
}

/**
 * Implements hook_theme_preprocess_block()
 * Allows use for variables in twig template
 */
function iastate_theme_preprocess_block__system_branding_block(&$variables)
{
  $variables['default_site_logo_alttext_url'] = theme_get_setting('default_site_logo_alttext_url');
  $variables['site_logo_alttext'] = theme_get_setting('site_logo_alttext');
  $variables['site_logo_url'] = theme_get_setting('site_logo_url');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * Allow template suggestion based on content type.
 */
function iastate_theme_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node && is_object($node) && isset($node->ds_switch->value)) {
    $content_type = $node->bundle();
    $view_mode = $node->ds_switch->value;
    $suggestions[] = 'page__type__' . $content_type;
    $suggestions[] = 'page__mode__' . $view_mode;
  }

  if (\Drupal::service('path.matcher')->isFrontPage() && $node && is_object($node)) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__type__' . $content_type . '__' . 'front';

    // If our front page is forced to be people_landing,
    // we need to explicitly define the template suggestion.
    $layout = theme_get_setting('front', 'iastate_theme');
    if ($content_type == 'people' && $layout == TRUE) {
      $suggestions[] = 'page__mode__people_landing';
    }
    //Determine error code so we can add a custom template.
    $route_name = \Drupal::routeMatch()->getRouteName();
    switch ($route_name) {

      case 'system.404':
        // Page Not Found.
        $error = 404;
        break;
    }
    if (isset($error)) {
      $suggestions[] = 'page__' . $error;
    }
  }

  // Template suggestions for the View (canonical) page per content type
  $route_name = \Drupal::routeMatch()->getRouteName();
  if (
    $route_name = \Drupal::routeMatch()->getRouteName()
    && $route_name == 'entity.node.canonical'
    && $node = \Drupal::request()->attributes->get('node')
  ) {
    $suggestions[] = 'page__type__' . $node->getType() . '__canonical';
  }

  // Template suggestions for Layout Builder enabled pages
  if (!empty($node) && $node instanceof \Drupal\node\NodeInterface) {
    $type = $node->getType();
    $entityTypeManager = \Drupal::service('entity_type.manager');
    $storage = $entityTypeManager->getStorage('entity_view_display');
    $view_display = $storage->load('node.' . $type . '.default');
    if (!is_null($view_display)) {
      $layout_builder_enabled = $view_display->getThirdPartySetting('layout_builder', 'enabled');
      if ($layout_builder_enabled) {
        array_splice($suggestions, 1, 0, 'page__node__layout__' . $type);
        array_splice($suggestions, 1, 0, 'page__node__layout');
      }
    }
  }
}
